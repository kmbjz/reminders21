package bot

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCommand handles bot commands
func (b *ReminderBot) handleCommand(msg *tgbotapi.Message) {
	b.logger.Printf("Received command: %s from %d", msg.Command(), msg.From.ID)

	switch msg.Command() {
	case "start":
		welcome := `–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –≤–∞–∂–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã. üßæ
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º, –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º! üòú –ò —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –ø—Ä–æ —Ç–≤–æ—ë –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è ü§ü
–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ, –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å ‚Äì –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º üòÅ
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /list ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ /recurring ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ /today ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ /tomorrow ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
‚Ä¢ /help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å`

		reply := tgbotapi.NewMessage(msg.Chat.ID, welcome)
		b.bot.Send(reply)

	case "timezone":
		b.handleTimezoneCommand(msg)

	case "list":
		reminders, err := b.repo.GetUserReminders(msg.From.ID)
		if err != nil {
			b.logger.Printf("Error getting reminders: %v", err)
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
			b.bot.Send(reply)
			return
		}

		if len(reminders) == 0 {
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
			b.bot.Send(reply)
			return
		}

		var lines []string
		for _, r := range reminders {
			lines = append(lines, fmt.Sprintf("%s ‚Äì %s", r.ReminderTime.Format("02.01.2006 15:04"), r.Label))
		}

		text := "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + strings.Join(lines, "\n")
		reply := tgbotapi.NewMessage(msg.Chat.ID, text)
		b.bot.Send(reply)

	case "recurring":
		b.processListRecurringOperation(msg)

	case "today":
		now := time.Now()
		start := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		end := start.Add(24 * time.Hour)

		reminders, err := b.repo.GetUserRemindersByPeriod(msg.From.ID, start, end)
		if err != nil {
			b.logger.Printf("Error getting today's reminders: %v", err)
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
			b.bot.Send(reply)
			return
		}

		if len(reminders) == 0 {
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
			b.bot.Send(reply)
			return
		}

		var lines []string
		for _, r := range reminders {
			lines = append(lines, fmt.Sprintf("%s ‚Äì %s", r.ReminderTime.Format("15:04"), r.Label))
		}

		text := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + strings.Join(lines, "\n")
		reply := tgbotapi.NewMessage(msg.Chat.ID, text)
		b.bot.Send(reply)

	case "tomorrow":
		now := time.Now()
		start := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location()).Add(24 * time.Hour)
		end := start.Add(24 * time.Hour)

		reminders, err := b.repo.GetUserRemindersByPeriod(msg.From.ID, start, end)
		if err != nil {
			b.logger.Printf("Error getting tomorrow's reminders: %v", err)
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
			b.bot.Send(reply)
			return
		}

		if len(reminders) == 0 {
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
			b.bot.Send(reply)
			return
		}

		var lines []string
		for _, r := range reminders {
			lines = append(lines, fmt.Sprintf("%s ‚Äì %s", r.ReminderTime.Format("15:04"), r.Label))
		}

		text := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n" + strings.Join(lines, "\n")
		reply := tgbotapi.NewMessage(msg.Chat.ID, text)
		b.bot.Send(reply)

	case "help":
		helpText := `–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –°–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
   –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
   "–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00"
   "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
   "–°–æ–≤–µ—â–∞–Ω–∏–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00"

2. –°–æ–∑–¥–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
   "–ù–∞–ø–æ–º–∏–Ω–∞–π –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00"
   "–ù–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –π–æ–≥—É –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 19:00"
   "–ù–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ 10 —á–∏—Å–ª–∞ –≤ 15:00"

3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
   ‚Ä¢ /list - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   ‚Ä¢ /recurring - –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   ‚Ä¢ /today - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   ‚Ä¢ /tomorrow - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
   ‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
   ‚Ä¢ "–ß—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é?"

4. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
   "–ü–µ—Ä–µ–Ω–µ—Å–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–≤–µ—â–∞–Ω–∏–∏ –Ω–∞ 11:00"
   "–ò–∑–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

5. –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
   "–£–¥–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ"
   "–û—Ç–º–µ–Ω–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –π–æ–≥—É"

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!`

		reply := tgbotapi.NewMessage(msg.Chat.ID, helpText)
		b.bot.Send(reply)

	default:
		reply := tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		b.bot.Send(reply)
	}
}

// handleTimezoneCommand handles timezone setting
func (b *ReminderBot) handleTimezoneCommand(msg *tgbotapi.Message) {
	// Check if there's an argument
	args := strings.TrimSpace(msg.CommandArguments())

	if args == "" {
		// No timezone provided, show current timezone and instructions
		timezone, err := b.repo.GetUserTimezone(msg.From.ID)
		if err != nil {
			b.logger.Printf("Error getting timezone: %v", err)
			timezone = "Europe/Moscow"
		}

		replyText := fmt.Sprintf(`–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %s

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:
/timezone Europe/Moscow

–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –†–æ—Å—Å–∏–∏:
- Europe/Moscow - –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
- Europe/Kaliningrad - –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥
- Europe/Samara - –°–∞–º–∞—Ä–∞
- Asia/Yekaterinburg - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
- Asia/Omsk - –û–º—Å–∫
- Asia/Krasnoyarsk - –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫
- Asia/Irkutsk - –ò—Ä–∫—É—Ç—Å–∫
- Asia/Yakutsk - –Ø–∫—É—Ç—Å–∫
- Asia/Vladivostok - –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫
- Asia/Magadan - –ú–∞–≥–∞–¥–∞–Ω
- Asia/Kamchatka - –ö–∞–º—á–∞—Ç–∫–∞`, timezone)

		reply := tgbotapi.NewMessage(msg.Chat.ID, replyText)
		b.bot.Send(reply)
		return
	}

	// Try to set the timezone
	err := b.repo.SetUserTimezone(msg.From.ID, args)
	if err != nil {
		b.logger.Printf("Error setting timezone: %v", err)
		reply := tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç 'Continent/City', –Ω–∞–ø—Ä–∏–º–µ—Ä 'Europe/Moscow'.")
		b.bot.Send(reply)
		return
	}

	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", args))
	b.bot.Send(reply)
}
